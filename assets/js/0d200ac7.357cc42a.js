"use strict";(self.webpackChunkStatescope=self.webpackChunkStatescope||[]).push([[734],{3950:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"PBMC-deconvolution","title":"Deconvolution of PBMC Data","description":"This tutorial explains how to use BLADE for NSCLC data deconvolution. It covers repository setup, signature creation, deconvolution execution on an HPC server, and visualizing the results.","source":"@site/docs/PBMC-deconvolution.md","sourceDirName":".","slug":"/PBMC-deconvolution","permalink":"/docs/PBMC-deconvolution","draft":false,"unlisted":false,"editUrl":"https://github.com/tgac-vumc/Statescopeweb.git/docs/PBMC-deconvolution.md","tags":[],"version":"current","frontMatter":{"id":"PBMC-deconvolution","title":"Deconvolution of PBMC Data"}}');var o=t(4848),r=t(8453);const i={id:"PBMC-deconvolution",title:"Deconvolution of PBMC Data"},a="Deconvolution of NSCLC Data",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Pull the Repository",id:"step-1-pull-the-repository",level:2},{value:"Step 2: Setup and Create Conda Environments",id:"step-2-setup-and-create-conda-environments",level:2},{value:"Step 3: Use Processed Signatures or Create New Signatures",id:"step-3-use-processed-signatures-or-create-new-signatures",level:2},{value:"Option 1: Use Processed Signatures",id:"option-1-use-processed-signatures",level:3},{value:"Option 2: Create New Signatures",id:"option-2-create-new-signatures",level:3},{value:"Step 4: Run Deconvolution on an HPC Server",id:"step-4-run-deconvolution-on-an-hpc-server",level:2},{value:"SLURM Job Script",id:"slurm-job-script",level:3},{value:"Step 5: Visualize Results",id:"step-5-visualize-results",level:2},{value:"Deconvolution Outputs:",id:"deconvolution-outputs",level:3},{value:"Python Script for Custom Visualization",id:"python-script-for-custom-visualization",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"deconvolution-of-nsclc-data",children:"Deconvolution of NSCLC Data"})}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial explains how to use ",(0,o.jsx)(n.strong,{children:"BLADE"})," for NSCLC data deconvolution. It covers repository setup, signature creation, deconvolution execution on an HPC server, and visualizing the results."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Access to an HPC Cluster"}),": Ensure you have SLURM or a similar job scheduler installed on your HPC."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Git and Conda Installed"}),": Git for pulling the repository and Conda for managing environments."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Bulk RNA-seq Data"}),": A transcriptome matrix in ",(0,o.jsx)(n.code,{children:".csv"}),", ",(0,o.jsx)(n.code,{children:".tsv"}),", or ",(0,o.jsx)(n.code,{children:".txt"})," format."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-1-pull-the-repository",children:"Step 1: Pull the Repository"}),"\n",(0,o.jsxs)(n.p,{children:["Clone the ",(0,o.jsx)(n.strong,{children:"BLADE"})," repository to your HPC server:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/\ncd BLADE\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-2-setup-and-create-conda-environments",children:"Step 2: Setup and Create Conda Environments"}),"\n",(0,o.jsx)(n.p,{children:"Ensure Conda is installed on your system. Create the required environments:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"conda env create -f envs/oncoBLADE.yaml\nconda env create -f envs/env_preprocess.yaml\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Activate the ",(0,o.jsx)(n.code,{children:"oncoBLADE"})," environment when running deconvolution:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"conda activate oncoBLADE\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-3-use-processed-signatures-or-create-new-signatures",children:"Step 3: Use Processed Signatures or Create New Signatures"}),"\n",(0,o.jsx)(n.h3,{id:"option-1-use-processed-signatures",children:"Option 1: Use Processed Signatures"}),"\n",(0,o.jsx)(n.p,{children:"Pre-processed signatures are provided in the repository. Use the file located at:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"SignaturePipeline/output/Corrected_Signature_matrix.pickle\n"})}),"\n",(0,o.jsx)(n.p,{children:"Ensure your bulk RNA-seq data matches the format of the signature file."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"option-2-create-new-signatures",children:"Option 2: Create New Signatures"}),"\n",(0,o.jsx)(n.p,{children:"To create new signatures from single-cell RNA-seq data, follow these steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Prepare the raw data files:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Counts matrix in ",(0,o.jsx)(n.code,{children:".rds"})," or ",(0,o.jsx)(n.code,{children:".mtx"})," format."]}),"\n",(0,o.jsxs)(n.li,{children:["Metadata in ",(0,o.jsx)(n.code,{children:".csv"})," format."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Edit the ",(0,o.jsx)(n.code,{children:"config.yaml"})," file to specify the paths to your data:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'data:\n  counts_matrix: "data/raw/RNA_rawcounts_matrix.rds"\n  metadata: "data/raw/metadata.csv"\n  cell_type_column: "cell_type_major"\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the Snakemake pipeline to preprocess the data and create signatures:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"snakemake -s Snakefile --cores 4 --use-conda\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This will generate a corrected signature matrix at:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"output/Corrected_Signature_matrix.pickle\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-4-run-deconvolution-on-an-hpc-server",children:"Step 4: Run Deconvolution on an HPC Server"}),"\n",(0,o.jsx)(n.h3,{id:"slurm-job-script",children:"SLURM Job Script"}),"\n",(0,o.jsxs)(n.p,{children:["Create a SLURM job script (",(0,o.jsx)(n.code,{children:"run_deconvolution.sh"}),") to execute the workflow:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n#SBATCH --job-name=pbmc_deconvolution\n#SBATCH --output=logs/deconvolution_%j.out\n#SBATCH --error=logs/deconvolution_%j.err\n#SBATCH --time=24:00:00\n#SBATCH --cpus-per-task=8\n#SBATCH --mem=32G\n#SBATCH --partition=standard\n\n# Load required modules\nmodule load python/3.8  # Adjust based on your cluster configuration\n\n# Activate Conda environment\nsource activate oncoBLADE\n\n# Run deconvolution\nsnakemake -s Snakefile \\\n    --cluster "sbatch --job-name={rule} --cpus-per-task={threads} --mem={resources.mem_mb} --output=logs/%x-%j.out --error=logs/%x-%j.err" \\\n    --default-resources mem_mb=32000 threads=1 \\\n    --use-conda \\\n    --jobs 10 \\\n    -p\n'})}),"\n",(0,o.jsx)(n.p,{children:"Submit the job to SLURM:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sbatch run_deconvolution.sh\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"step-5-visualize-results",children:"Step 5: Visualize Results"}),"\n",(0,o.jsx)(n.p,{children:"The workflow generates several output files, including visualizations. To analyze and visualize the results:"}),"\n",(0,o.jsx)(n.h3,{id:"deconvolution-outputs",children:"Deconvolution Outputs:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"output/torch/oncoBLADE_output.pickle"}),": Contains deconvolution results."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"graphs/estimated_fractions.png"}),": Visualization of estimated cell fractions."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"python-script-for-custom-visualization",children:"Python Script for Custom Visualization"}),"\n",(0,o.jsx)(n.p,{children:"Use the following script to load and plot the deconvolution results:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import pickle\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load deconvolution results\nwith open('output/torch/oncoBLADE_output.pickle', 'rb') as f:\n    results = pickle.load(f)\n\n# Convert to DataFrame\nfractions = pd.DataFrame(results['cell_fractions'])\nfractions.index = results['samples']\nfractions.columns = results['cell_types']\n\n# Plot estimated cell fractions\nfractions.plot(kind='bar', stacked=True, figsize=(10, 6))\nplt.title('Estimated Cell Fractions')\nplt.ylabel('Fraction')\nplt.xlabel('Samples')\nplt.legend(loc='upper right', bbox_to_anchor=(1.25, 1))\nplt.tight_layout()\nplt.savefig('graphs/custom_estimated_fractions.png')\nplt.show()\n"})}),"\n",(0,o.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);